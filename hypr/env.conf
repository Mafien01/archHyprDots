#####################################
#       F*** nvidia specific        #
#####################################

# Hardware acceleration on NVIDIA GPUs
# (https://wiki.archlinux.org/title/Hardware_video_acceleration)
env = LIBVA_DRIVER_NAME,nvidia

# (https://wiki.archlinux.org/title/Wayland#Requirements)
env = GBM_BACKEND,nvidia-drm
# To force GBM as a backend
env = __GLX_VENDOR_LIBRARY_NAME,nvidia

# Controls if G-Sync capable monitors should use Variable Refresh Rate (VRR)
# See Nvidia Documentation for details.
# (https://download.nvidia.com/XFree86/Linux-32bit-ARM/375.26/README/openglenvvariables.html)
env = __GL_GSYNC_ALLOWED,1

# Controls if Adaptive Sync should be used. Recommended to set as “0” to avoid
# having problems on some games.
env = __GL_VRR_ALLOWED,1
# use legacy DRM interface instead of atomic mode setting. Might fix flickering
# issues
env = WLR_DRM_NO_ATOMIC=1

env = __VK_LAYER_NV_optimus,NVIDIA_only
env = NVD_BACKEND,direct

#####################################
#         XDG specific              #
#####################################

# NOTE: this is also an nvidia specific
env = XDG_SESSION_TYPE,wayland

# XDG specific environment variables are often detected through portals and applications that may set those for you,
# however it is not a bad idea to set them explicitly.
env = XDG_SESSION_DESKTOP,Hyprland

#####################################
#         Theming specific          #
#####################################

env = XCURSOR_SIZE,24


#####################################
#         Toolkit Backend vars      #
#####################################
# QT: Use wayland if available, fall back to x11 if not.
env = QT_QPA_PLATFORM,wayland # "wayland;xcb"

# GTK: Use wayland if available, fall back to x11 if not.
env = GDK_BACKEND,wayland,x11

# Run SDL2 applications on Wayland. Remove or set to x11 if games that 
# provide older versions of SDL cause compatibility issues
env = SDL_VIDEODRIVER,wayland 

# Clutter package already has wayland enabled, this variable 
#will force Clutter applications to try and use the Wayland backend
env = CLUTTER_BACKEND,wayland 

# software rendering backend 
env = WLR_RENDERER_ALLOW_SOFTWARE,1

# env = QT_STYLE_OVERRIDE,kvantum

env = QT_QPA_PLATFORMTHEME,qt5ct 
env = QT_QPA_PLATFORMTHEME,qt6ct 

#####################################
#         Apps specific             #
#####################################

# Enables Wayland for Mozilla products
# (https://discourse.ubuntu.com/t/environment-variables-for-wayland-hackers/12750)
# set to 1 firefox uses GTK
# set to wayland will force firefox to run on wayland
env = MOZ_ENABLE_WAYLAND,1
env = MOZ_DISABLE_RDD_SANDBOX,1
env = MOZ_DBUS_REMOTE,1

#####################################
#         idk those guyes           #
#####################################

env = PROTON_ENABLE_NGX_UPDATER,1

# env = MANGOHUD,1
# env = MANGOHUD_DLSYM,1
env = WLR_USE_LIBINPUT,1
# env = LIBSEAT_BACKEND,logind
# env = QT_SELECTION=/usr/bin/qmake
# env = ELECTRON_ARGS="--enable-features=UseOzonePlatform --ozone-platform=wayland"
# env = GDK_SCALE,1
# env = GDK_DPI_SCALE,1


xwayland {
force_zero_scaling = true
}
